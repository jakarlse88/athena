// <auto-generated />
using Athena.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Athena.Data.Migrations
{
    [DbContext(typeof(AthenaDbContext))]
    partial class AthenaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Athena.Models.Entities.Form", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormFamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("FormFamilyName");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_Form_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_Form_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("Athena.Models.Entities.FormFamily", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_FormFamily_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_FormFamily_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("FormFamily");
                });

            modelBuilder.Entity("Athena.Models.Entities.Movement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TechniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TransitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TechniqueName");

                    b.HasIndex("TransitionId");

                    b.HasIndex("StanceName", "TechniqueName", "TransitionId")
                        .IsUnique()
                        .HasName("UK_Movement");

                    b.ToTable("Movement");
                });

            modelBuilder.Entity("Athena.Models.Entities.NumberInSequence", b =>
                {
                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MovementId")
                        .HasColumnType("int");

                    b.Property<byte>("OrdinalNumber")
                        .HasColumnType("tinyint");

                    b.HasKey("FormName", "MovementId", "OrdinalNumber");

                    b.HasIndex("MovementId");

                    b.ToTable("NumberInSequence");
                });

            modelBuilder.Entity("Athena.Models.Entities.RelativeDirection", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_RelativeDirection_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_RelativeDirection_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("RelativeDirection");
                });

            modelBuilder.Entity("Athena.Models.Entities.RotationCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_RotationCategory_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_RotationCategory_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("RotationCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.Stance", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StanceCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StanceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_Stance_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_Stance_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.HasIndex("StanceCategoryName");

                    b.HasIndex("StanceTypeName");

                    b.HasIndex("Name", "StanceCategoryName", "StanceTypeName")
                        .IsUnique()
                        .HasName("UK_Stance");

                    b.ToTable("Stance");
                });

            modelBuilder.Entity("Athena.Models.Entities.StanceCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_StanceCategory_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_StanceCategory_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("StanceCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.StanceType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_StanceType_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_StanceType_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("StanceType");
                });

            modelBuilder.Entity("Athena.Models.Entities.Technique", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TechniqueCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TechniqueTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name")
                        .HasName("PK_Technique_1");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_Technique_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_Technique_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.HasIndex("TechniqueCategoryName");

                    b.HasIndex("TechniqueTypeName");

                    b.HasIndex("Name", "TechniqueCategoryName", "TechniqueTypeName")
                        .IsUnique()
                        .HasName("UK_Technique");

                    b.ToTable("Technique");
                });

            modelBuilder.Entity("Athena.Models.Entities.TechniqueCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_TechniqueCategory_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_TechniqueCategory_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("TechniqueCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.TechniqueType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHangeul")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameHanja")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.HasIndex("NameHangeul")
                        .IsUnique()
                        .HasName("UK_TechniqueType_NameHangeul")
                        .HasFilter("[NameHangeul] IS NOT NULL");

                    b.HasIndex("NameHanja")
                        .IsUnique()
                        .HasName("UK_TechniqueType_NameHanja")
                        .HasFilter("[NameHanja] IS NOT NULL");

                    b.ToTable("TechniqueType");
                });

            modelBuilder.Entity("Athena.Models.Entities.Transition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("RelativeDirectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RotationCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TechniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RotationCategoryName");

                    b.HasIndex("TechniqueName");

                    b.HasIndex("RelativeDirectionName", "RotationCategoryName", "StanceName", "TechniqueName")
                        .IsUnique()
                        .HasName("UK_Transition");

                    b.ToTable("Transition");
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.ToTable("TransitionCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategoryTransition", b =>
                {
                    b.Property<string>("TransitionCategoryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TransitionId")
                        .HasColumnType("int");

                    b.HasKey("TransitionCategoryName", "TransitionId");

                    b.HasIndex("TransitionId");

                    b.ToTable("TransitionCategoryTransition");
                });

            modelBuilder.Entity("Athena.Models.Entities.Form", b =>
                {
                    b.HasOne("Athena.Models.Entities.FormFamily", "FormFamilyNameNavigation")
                        .WithMany("Form")
                        .HasForeignKey("FormFamilyName")
                        .HasConstraintName("FK_Form_FormFamily")
                        .IsRequired();
                });

            modelBuilder.Entity("Athena.Models.Entities.Movement", b =>
                {
                    b.HasOne("Athena.Models.Entities.Stance", "StanceNameNavigation")
                        .WithMany("Movement")
                        .HasForeignKey("StanceName")
                        .HasConstraintName("FK_Movement_Stance")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Technique", "TechniqueNameNavigation")
                        .WithMany("Movement")
                        .HasForeignKey("TechniqueName")
                        .HasConstraintName("FK_Movement_Technique")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Transition", "Transition")
                        .WithMany("Movement")
                        .HasForeignKey("TransitionId")
                        .HasConstraintName("FK_Movement_Transition")
                        .IsRequired();
                });

            modelBuilder.Entity("Athena.Models.Entities.NumberInSequence", b =>
                {
                    b.HasOne("Athena.Models.Entities.Form", "FormNameNavigation")
                        .WithMany("NumberInSequence")
                        .HasForeignKey("FormName")
                        .HasConstraintName("FK_NumberInSequence_Form")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Movement", "Movement")
                        .WithMany("NumberInSequence")
                        .HasForeignKey("MovementId")
                        .HasConstraintName("FK_NumberInSequence_Movement")
                        .IsRequired();
                });

            modelBuilder.Entity("Athena.Models.Entities.Stance", b =>
                {
                    b.HasOne("Athena.Models.Entities.StanceCategory", "StanceCategoryNameNavigation")
                        .WithMany("Stance")
                        .HasForeignKey("StanceCategoryName")
                        .HasConstraintName("FK_Stance_StanceCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.StanceType", "StanceTypeNameNavigation")
                        .WithMany("Stance")
                        .HasForeignKey("StanceTypeName")
                        .HasConstraintName("FK_Stance_StanceType")
                        .IsRequired();
                });

            modelBuilder.Entity("Athena.Models.Entities.Technique", b =>
                {
                    b.HasOne("Athena.Models.Entities.TechniqueCategory", "TechniqueCategoryNameNavigation")
                        .WithMany("Technique")
                        .HasForeignKey("TechniqueCategoryName")
                        .HasConstraintName("FK_Technique_TechniqueCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.TechniqueType", "TechniqueTypeNameNavigation")
                        .WithMany("Technique")
                        .HasForeignKey("TechniqueTypeName")
                        .HasConstraintName("FK_Technique_TechniqueType")
                        .IsRequired();
                });

            modelBuilder.Entity("Athena.Models.Entities.Transition", b =>
                {
                    b.HasOne("Athena.Models.Entities.RelativeDirection", "RelativeDirectionNameNavigation")
                        .WithMany("Transition")
                        .HasForeignKey("RelativeDirectionName")
                        .HasConstraintName("FK_Transition_RelativeDirection")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.RotationCategory", "RotationCategoryNameNavigation")
                        .WithMany("Transition")
                        .HasForeignKey("RotationCategoryName")
                        .HasConstraintName("FK_Transition_RotationCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Technique", "TechniqueNameNavigation")
                        .WithMany("Transition")
                        .HasForeignKey("TechniqueName")
                        .HasConstraintName("FK_Transition_Technique")
                        .IsRequired();
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategoryTransition", b =>
                {
                    b.HasOne("Athena.Models.Entities.TransitionCategory", "TransitionCategoryNameNavigation")
                        .WithMany("TransitionCategoryTransition")
                        .HasForeignKey("TransitionCategoryName")
                        .HasConstraintName("FK_TransitionCategoryTransition_TransitionCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Transition", "Transition")
                        .WithMany("TransitionCategoryTransition")
                        .HasForeignKey("TransitionId")
                        .HasConstraintName("FK_TransitionCategoryTransition_Transition")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
