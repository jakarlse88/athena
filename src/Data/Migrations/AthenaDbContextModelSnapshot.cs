// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Athena.Data.Migrations
{
    [DbContext(typeof(AthenaDbContext))]
    partial class AthenaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Athena.Models.Entities.Form", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FormFamilyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "FormFamilyName" }, "IX_Form_FormFamilyName");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_Form_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_Form_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("Athena.Models.Entities.FormFamily", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_FormFamily_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_FormFamily_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("FormFamily");
                });

            modelBuilder.Entity("Athena.Models.Entities.Movement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StanceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechniqueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TransitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TechniqueName" }, "IX_Movement_TechniqueName");

                    b.HasIndex(new[] { "TransitionId" }, "IX_Movement_TransitionId");

                    b.HasIndex(new[] { "StanceName", "TechniqueName", "TransitionId" }, "UK_Movement")
                        .IsUnique();

                    b.ToTable("Movement");
                });

            modelBuilder.Entity("Athena.Models.Entities.NumberInSequence", b =>
                {
                    b.Property<string>("FormName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MovementId")
                        .HasColumnType("int");

                    b.Property<byte>("OrdinalNumber")
                        .HasColumnType("tinyint");

                    b.HasKey("FormName", "MovementId", "OrdinalNumber");

                    b.HasIndex(new[] { "MovementId" }, "IX_NumberInSequence_MovementId");

                    b.ToTable("NumberInSequence");
                });

            modelBuilder.Entity("Athena.Models.Entities.RelativeDirection", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_RelativeDirection_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_RelativeDirection_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("RelativeDirection");
                });

            modelBuilder.Entity("Athena.Models.Entities.RotationCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_RotationCategory_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_RotationCategory_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("RotationCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.Stance", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StanceCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StanceTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "StanceCategoryName" }, "IX_Stance_StanceCategoryName");

                    b.HasIndex(new[] { "StanceTypeName" }, "IX_Stance_StanceTypeName");

                    b.HasIndex(new[] { "Name", "StanceCategoryName", "StanceTypeName" }, "UK_Stance")
                        .IsUnique();

                    b.HasIndex(new[] { "NameHangeul" }, "UK_Stance_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_Stance_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("Stance");
                });

            modelBuilder.Entity("Athena.Models.Entities.StanceCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_StanceCategory_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_StanceCategory_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("StanceCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.StanceType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_StanceType_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_StanceType_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("StanceType");
                });

            modelBuilder.Entity("Athena.Models.Entities.Technique", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechniqueCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechniqueTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name")
                        .HasName("PK_Technique_1");

                    b.HasIndex(new[] { "TechniqueCategoryName" }, "IX_Technique_TechniqueCategoryName");

                    b.HasIndex(new[] { "TechniqueTypeName" }, "IX_Technique_TechniqueTypeName");

                    b.HasIndex(new[] { "Name", "TechniqueCategoryName", "TechniqueTypeName" }, "UK_Technique")
                        .IsUnique();

                    b.HasIndex(new[] { "NameHangeul" }, "UK_Technique_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_Technique_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("Technique");
                });

            modelBuilder.Entity("Athena.Models.Entities.TechniqueCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_TechniqueCategory_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_TechniqueCategory_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("TechniqueCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.TechniqueType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameHangeul")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameHanja")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.HasIndex(new[] { "NameHangeul" }, "UK_TechniqueType_NameHangeul")
                        .IsUnique()
                        .HasFilter("([NameHangeul] IS NOT NULL)");

                    b.HasIndex(new[] { "NameHanja" }, "UK_TechniqueType_NameHanja")
                        .IsUnique()
                        .HasFilter("([NameHanja] IS NOT NULL)");

                    b.ToTable("TechniqueType");
                });

            modelBuilder.Entity("Athena.Models.Entities.Transition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RelativeDirectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RotationCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StanceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechniqueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RotationCategoryName" }, "IX_Transition_RotationCategoryName");

                    b.HasIndex(new[] { "TechniqueName" }, "IX_Transition_TechniqueName");

                    b.HasIndex(new[] { "RelativeDirectionName", "RotationCategoryName", "StanceName", "TechniqueName" }, "UK_Transition")
                        .IsUnique();

                    b.ToTable("Transition");
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Name");

                    b.ToTable("TransitionCategory");
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategoryTransition", b =>
                {
                    b.Property<string>("TransitionCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TransitionId")
                        .HasColumnType("int");

                    b.HasKey("TransitionCategoryName", "TransitionId");

                    b.HasIndex(new[] { "TransitionId" }, "IX_TransitionCategoryTransition_TransitionId");

                    b.ToTable("TransitionCategoryTransition");
                });

            modelBuilder.Entity("Athena.Models.Entities.Form", b =>
                {
                    b.HasOne("Athena.Models.Entities.FormFamily", "FormFamilyNameNavigation")
                        .WithMany("Forms")
                        .HasForeignKey("FormFamilyName")
                        .HasConstraintName("FK_Form_FormFamily")
                        .IsRequired();

                    b.Navigation("FormFamilyNameNavigation");
                });

            modelBuilder.Entity("Athena.Models.Entities.Movement", b =>
                {
                    b.HasOne("Athena.Models.Entities.Stance", "StanceNameNavigation")
                        .WithMany("Movements")
                        .HasForeignKey("StanceName")
                        .HasConstraintName("FK_Movement_Stance")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Technique", "TechniqueNameNavigation")
                        .WithMany("Movements")
                        .HasForeignKey("TechniqueName")
                        .HasConstraintName("FK_Movement_Technique")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Transition", "Transition")
                        .WithMany("Movements")
                        .HasForeignKey("TransitionId")
                        .HasConstraintName("FK_Movement_Transition")
                        .IsRequired();

                    b.Navigation("StanceNameNavigation");

                    b.Navigation("TechniqueNameNavigation");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("Athena.Models.Entities.NumberInSequence", b =>
                {
                    b.HasOne("Athena.Models.Entities.Form", "FormNameNavigation")
                        .WithMany("NumberInSequences")
                        .HasForeignKey("FormName")
                        .HasConstraintName("FK_NumberInSequence_Form")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Movement", "Movement")
                        .WithMany("NumberInSequences")
                        .HasForeignKey("MovementId")
                        .HasConstraintName("FK_NumberInSequence_Movement")
                        .IsRequired();

                    b.Navigation("FormNameNavigation");

                    b.Navigation("Movement");
                });

            modelBuilder.Entity("Athena.Models.Entities.Stance", b =>
                {
                    b.HasOne("Athena.Models.Entities.StanceCategory", "StanceCategoryNameNavigation")
                        .WithMany("Stances")
                        .HasForeignKey("StanceCategoryName")
                        .HasConstraintName("FK_Stance_StanceCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.StanceType", "StanceTypeNameNavigation")
                        .WithMany("Stances")
                        .HasForeignKey("StanceTypeName")
                        .HasConstraintName("FK_Stance_StanceType")
                        .IsRequired();

                    b.Navigation("StanceCategoryNameNavigation");

                    b.Navigation("StanceTypeNameNavigation");
                });

            modelBuilder.Entity("Athena.Models.Entities.Technique", b =>
                {
                    b.HasOne("Athena.Models.Entities.TechniqueCategory", "TechniqueCategoryNameNavigation")
                        .WithMany("Techniques")
                        .HasForeignKey("TechniqueCategoryName")
                        .HasConstraintName("FK_Technique_TechniqueCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.TechniqueType", "TechniqueTypeNameNavigation")
                        .WithMany("Techniques")
                        .HasForeignKey("TechniqueTypeName")
                        .HasConstraintName("FK_Technique_TechniqueType")
                        .IsRequired();

                    b.Navigation("TechniqueCategoryNameNavigation");

                    b.Navigation("TechniqueTypeNameNavigation");
                });

            modelBuilder.Entity("Athena.Models.Entities.Transition", b =>
                {
                    b.HasOne("Athena.Models.Entities.RelativeDirection", "RelativeDirectionNameNavigation")
                        .WithMany("Transitions")
                        .HasForeignKey("RelativeDirectionName")
                        .HasConstraintName("FK_Transition_RelativeDirection")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.RotationCategory", "RotationCategoryNameNavigation")
                        .WithMany("Transitions")
                        .HasForeignKey("RotationCategoryName")
                        .HasConstraintName("FK_Transition_RotationCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Technique", "TechniqueNameNavigation")
                        .WithMany("Transitions")
                        .HasForeignKey("TechniqueName")
                        .HasConstraintName("FK_Transition_Technique")
                        .IsRequired();

                    b.Navigation("RelativeDirectionNameNavigation");

                    b.Navigation("RotationCategoryNameNavigation");

                    b.Navigation("TechniqueNameNavigation");
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategoryTransition", b =>
                {
                    b.HasOne("Athena.Models.Entities.TransitionCategory", "TransitionCategoryNameNavigation")
                        .WithMany("TransitionCategoryTransitions")
                        .HasForeignKey("TransitionCategoryName")
                        .HasConstraintName("FK_TransitionCategoryTransition_TransitionCategory")
                        .IsRequired();

                    b.HasOne("Athena.Models.Entities.Transition", "Transition")
                        .WithMany("TransitionCategoryTransitions")
                        .HasForeignKey("TransitionId")
                        .HasConstraintName("FK_TransitionCategoryTransition_Transition")
                        .IsRequired();

                    b.Navigation("Transition");

                    b.Navigation("TransitionCategoryNameNavigation");
                });

            modelBuilder.Entity("Athena.Models.Entities.Form", b =>
                {
                    b.Navigation("NumberInSequences");
                });

            modelBuilder.Entity("Athena.Models.Entities.FormFamily", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("Athena.Models.Entities.Movement", b =>
                {
                    b.Navigation("NumberInSequences");
                });

            modelBuilder.Entity("Athena.Models.Entities.RelativeDirection", b =>
                {
                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Athena.Models.Entities.RotationCategory", b =>
                {
                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Athena.Models.Entities.Stance", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("Athena.Models.Entities.StanceCategory", b =>
                {
                    b.Navigation("Stances");
                });

            modelBuilder.Entity("Athena.Models.Entities.StanceType", b =>
                {
                    b.Navigation("Stances");
                });

            modelBuilder.Entity("Athena.Models.Entities.Technique", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Athena.Models.Entities.TechniqueCategory", b =>
                {
                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("Athena.Models.Entities.TechniqueType", b =>
                {
                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("Athena.Models.Entities.Transition", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("TransitionCategoryTransitions");
                });

            modelBuilder.Entity("Athena.Models.Entities.TransitionCategory", b =>
                {
                    b.Navigation("TransitionCategoryTransitions");
                });
#pragma warning restore 612, 618
        }
    }
}
